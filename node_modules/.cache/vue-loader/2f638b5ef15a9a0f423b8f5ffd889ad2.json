{"remainingRequest":"/home/ttpllt041/Documents/git/Dialogflow-Web-Chatbot-UI/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/ttpllt041/Documents/git/Dialogflow-Web-Chatbot-UI/src/Views/App.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/ttpllt041/Documents/git/Dialogflow-Web-Chatbot-UI/src/Views/App.vue","mtime":1619411012348},{"path":"/home/ttpllt041/Documents/git/Dialogflow-Web-Chatbot-UI/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/ttpllt041/Documents/git/Dialogflow-Web-Chatbot-UI/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/ttpllt041/Documents/git/Dialogflow-Web-Chatbot-UI/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}