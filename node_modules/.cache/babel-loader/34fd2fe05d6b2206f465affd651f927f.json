{"remainingRequest":"/home/ttpllt041/Documents/Dialogflow-Web-Chatbot-UI/node_modules/babel-loader/lib/index.js!/home/ttpllt041/Documents/Dialogflow-Web-Chatbot-UI/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/ttpllt041/Documents/Dialogflow-Web-Chatbot-UI/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/ttpllt041/Documents/Dialogflow-Web-Chatbot-UI/src/Views/App.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/ttpllt041/Documents/Dialogflow-Web-Chatbot-UI/src/Views/App.vue","mtime":1619411012348},{"path":"/home/ttpllt041/Documents/Dialogflow-Web-Chatbot-UI/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/ttpllt041/Documents/Dialogflow-Web-Chatbot-UI/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/ttpllt041/Documents/Dialogflow-Web-Chatbot-UI/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/ttpllt041/Documents/Dialogflow-Web-Chatbot-UI/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["App.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n    <main id=\"app\">\n        <!-- TopHead is the header with the information about the app -->\n        <TopHead v-if=\"app && messages.length > 0\" :app=\"app\">\n            <!-- Audio toggle (on the top right corner), used to toggle the audio output, default mode is defined in the settings -->\n            <button\n                class=\"audio-toggle\"\n                :title=\"muted ? (translations[lang()] && translations[lang()].unMuteTitle) || translations[config.fallback_lang].unMuteTitle : (translations[lang()] && translations[lang()].muteTitle) || translations[config.fallback_lang].muteTitle\"\n                :aria-label=\"muted ? (translations[lang()] && translations[lang()].unMuteTitle) || translations[config.fallback_lang].unMuteTitle : (translations[lang()] && translations[lang()].muteTitle) || translations[config.fallback_lang].muteTitle\"\n                @click=\"muted = !muted\">\n                <i aria-hidden=\"true\" class=\"material-icons\">{{muted ? 'volume_off': 'volume_up'}}</i>\n            </button>\n        </TopHead>\n        <section class=\"container chat-container\">\n            <!-- Error component is for displaying errors -->\n            <Error v-if=\"error\" :error=\"error\" />\n\n            <!-- Welcome component is for onboarding experience and language picker -->\n            <Welcome v-if=\"app && messages.length == 0\" :app=\"app\" />\n\n            <!-- Messages Table -->\n            <section v-else aria-live=\"polite\">\n                <div v-for=\"message in messages\" id=\"message\" :key=\"message.responseId\">\n                    <!-- My message -->\n                    <BubbleWrapper><Bubble v-if=\"message.queryResult.queryText\" :text=\"message.queryResult.queryText\" me /></BubbleWrapper>\n\n                    <!-- Dialogflow Components -->\n                    <RichComponent v-for=\"(component, component_id) in message.queryResult.fulfillmentMessages\" :key=\"component_id\">\n                        <!-- Text (https://cloud.google.com/dialogflow/docs/reference/rest/v2beta1/projects.agent.intents#Text) -->\n                        <Bubble v-if=\"component.text\" :text=\"component.text.text[0]\" />\n\n                        <!-- SimpleResponses (https://cloud.google.com/dialogflow/docs/reference/rest/v2beta1/projects.agent.intents#SimpleResponses) -->\n                        <Bubble\n                            v-if=\"component.simpleResponses\"\n                            :text=\"component.simpleResponses.simpleResponses[0].displayText || component.simpleResponses.simpleResponses[0].textToSpeech\"\n                        />\n\n                        <!-- RbmText (https://cloud.google.com/dialogflow/docs/reference/rest/v2beta1/projects.agent.intents#rbmtext) -->\n                        <div v-if=\"component.rbmText\">\n                            <Bubble :text=\"component.rbmText.text\" />\n                            <div v-for=\"(suggestion, suggestion_id) in component.rbmText.rbmSuggestion\" :key=\"suggestion_id\">\n                                <CardButton\n                                    v-if=\"suggestion.reply\"\n                                    :title=\"suggestion.reply.text\"\n                                    @click.native=\"send({text: suggestion.reply.text.postbackData})\"\n                                />\n\n                                <CardButton\n                                    v-if=\"suggestion.action\"\n                                    :title=\"suggestion.action.text\"\n                                    :uri=\"suggestion.action.openUrl.uri\"\n                                />\n                            </div>\n                        </div>\n\n                        <!-- Card (https://cloud.google.com/dialogflow/docs/reference/rest/v2beta1/projects.agent.intents#Card) -->\n                        <Card\n                            v-if=\"component.card\"\n                            :title=\"component.card.title\"\n                            :subtitle=\"component.card.subtitle\"\n                            :image-uri=\"component.card.imageUri\">\n                            <CardButton\n                                v-for=\"(button, button_id) in component.card.buttons\"\n                                :key=\"button_id\"\n                                :uri=\"button.postback\"\n                                :title=\"button.text\"\n                            />\n                        </Card>\n\n                        <!-- BasicCard (https://cloud.google.com/dialogflow/docs/reference/rest/v2beta1/projects.agent.intents#BasicCard) -->\n                        <Card\n                            v-if=\"component.basicCard\"\n                            :title=\"component.basicCard.title\"\n                            :subtitle=\"component.basicCard.subtitle\"\n                            :image-uri=\"component.basicCard.image.imageUri\"\n                            :image-title=\"component.basicCard.image.accessibilityText\"\n                            :text=\"component.basicCard.formattedText\">\n                            <CardButton\n                                v-for=\"(button, button_id) in component.basicCard.buttons\"\n                                :key=\"button_id\"\n                                :uri=\"button.openUriAction.uri\"\n                                :title=\"button.title\"\n                            />\n                        </Card>\n\n                        <!-- RbmStandaloneCard (https://cloud.google.com/dialogflow/docs/reference/rest/v2beta1/projects.agent.intents#rbmstandalonecard) -->\n                        <Card\n                            v-if=\"component.rbmStandaloneRichCard\"\n                            :title=\"component.rbmStandaloneRichCard.cardContent.title\"\n                            :image-uri=\"component.rbmStandaloneRichCard.cardContent.media.fileUri\"\n                            :text=\"component.rbmStandaloneRichCard.cardContent.description\">\n                            <div v-for=\"(suggestion, suggestion_id) in component.rbmStandaloneRichCard.cardContent.suggestions\" :key=\"suggestion_id\">\n                                <CardButton\n                                    v-if=\"suggestion.reply\"\n                                    :title=\"suggestion.reply.text\"\n                                    @click.native=\"send({text: suggestion.reply.text.postbackData})\"\n                                />\n                                <CardButton\n                                    v-if=\"suggestion.action\"\n                                    :title=\"suggestion.action.text\"\n                                    :uri=\"suggestion.action.openUrl.uri\"\n                                />\n                            </div>\n                        </Card>\n\n                        <!-- CarouselSelect (https://cloud.google.com/dialogflow/docs/reference/rest/v2beta1/projects.agent.intents#CarouselSelect) -->\n                        <Carousel v-if=\"component.carouselSelect\">\n                            <Card\n                                v-for=\"item in component.carouselSelect.items\"\n                                :key=\"item.info.key\"\n                                :title=\"item.title\"\n                                :image-uri=\"item.image.imageUri\"\n                                :image-title=\"item.image.accessibilityText\"\n                                :text=\"item.description\"\n                                @click.native=\"send({text: item.info.key})\"\n                            />\n                        </Carousel>\n\n                        <!-- RbmCarouselCard (https://cloud.google.com/dialogflow/docs/reference/rest/v2beta1/projects.agent.intents#rbmcarouselcard) -->\n                        <Carousel v-if=\"component.rbmCarouselRichCard\">\n                            <Card\n                                v-for=\"(card, card_id) in component.rbmCarouselRichCard.cardContents\"\n                                :key=\"card_id\"\n                                :title=\"card.title\"\n                                :image-uri=\"card.media.fileUri\"\n                                :text=\"card.description\">\n                                <div v-for=\"(suggestion, suggestion_id) in card.suggestions\" :key=\"suggestion_id\">\n                                    <CardButton\n                                        v-if=\"suggestion.reply\"\n                                        :title=\"suggestion.reply.text\"\n                                        @click.native=\"send({text: suggestion.reply.text.postbackData})\"\n                                    />\n                                    <CardButton\n                                        v-if=\"suggestion.action\"\n                                        :title=\"suggestion.action.text\"\n                                        :uri=\"suggestion.action.openUrl.uri\"\n                                    />\n                                </div>\n                            </Card>\n                        </Carousel>\n\n                        <!-- ListSelect (https://cloud.google.com/dialogflow/docs/reference/rest/v2beta1/projects.agent.intents#ListSelect) -->\n                        <List\n                            v-if=\"component.listSelect\"\n                            :title=\"component.listSelect.title\"\n                            :subtitle=\"component.listSelect.subtitle\">\n                            <ListItem\n                                v-for=\"item in component.listSelect.items\"\n                                :key=\"item.info.key\"\n                                :title=\"item.title\"\n                                :description=\"item.description\"\n                                :image-uri=\"item.image.imageUri\"\n                                :image-title=\"item.image.accessibilityText\"\n                                @click.native=\"send({text: item.info.key})\"\n                            />\n                        </List>\n\n                        <!-- Image (https://cloud.google.com/dialogflow/docs/reference/rest/v2beta1/projects.agent.intents#Image) -->\n                        <Picture v-if=\"component.image\" :uri=\"component.image.imageUri\" :title=\"component.image.accessibilityText\" />\n\n                        <!-- Media (https://cloud.google.com/dialogflow/docs/reference/rest/v2beta1/projects.agent.intents#MediaContent) -->\n                        <div v-if=\"component.mediaContent && component.mediaContent.mediaObjects\">\n                            <Media\n                                v-for=\"(media, media_id) in component.mediaContent.mediaObjects\"\n                                :key=\"media_id\"\n                                :name=\"media.name\"\n                                :description=\"media.description\"\n                                :icon-uri=\"media.icon ? media.icon.imageUri : media.largeImage.imageUri\"\n                                :icon-title=\"media.icon ? media.icon.accessibilityText : media.largeImage.accessibilityText\"\n                                :uri=\"media.contentUrl\"\n                            />\n                        </div>\n\n                        <!-- TableCard (https://cloud.google.com/dialogflow/docs/reference/rest/v2beta1/projects.agent.intents#tablecard) -->\n                        <TableCard\n                            v-if=\"component.tableCard\"\n                            :title=\"component.tableCard.title\"\n                            :subtitle=\"component.tableCard.subtitle\"\n                            :image-uri=\"component.tableCard.image.imageUri\"\n                            :image-title=\"component.tableCard.image.accessibilityText\"\n                            :header=\"component.tableCard.columnProperties\"\n                            :rows=\"component.tableCard.rows\">\n                            <CardButton\n                                v-for=\"(button, button_id) in component.tableCard.buttons\"\n                                :key=\"button_id\"\n                                :uri=\"button.openUriAction.uri\"\n                                :title=\"button.title\"\n                            />\n                        </TableCard>\n                    </RichComponent>\n\n                    <!-- Actions on Google Components -->\n                    <section v-if=\"message.queryResult.webhookPayload && message.queryResult.webhookPayload.google\">\n                        <RichComponent v-for=\"(component, component_id) in message.queryResult.webhookPayload.google.richResponse.items\" :key=\"component_id\">\n                            <!-- Simple response (https://developers.google.com/actions/assistant/responses#simple_response) -->\n                            <Bubble\n                                v-if=\"component.simpleResponse\"\n                                :text=\"component.simpleResponse.displayText || component.simpleResponse.textToSpeech\"\n                            />\n\n                            <!-- Basic card (https://developers.google.com/actions/assistant/responses#basic_card) -->\n                            <Card\n                                v-if=\"component.basicCard\"\n                                :title=\"component.basicCard.title\"\n                                :subtitle=\"component.basicCard.subtitle\"\n                                :image-uri=\"component.basicCard.image.url\"\n                                :image-title=\"component.basicCard.image.accessibilityText\"\n                                :text=\"component.basicCard.formattedText\">\n                                <CardButton\n                                    v-for=\"(button, button_id) in component.basicCard.buttons\"\n                                    :key=\"button_id\"\n                                    :uri=\"button.openUrlAction.url\"\n                                    :title=\"button.title\"\n                                />\n                            </Card>\n\n                            <!-- Browsing Carousel (https://developers.google.com/actions/assistant/responses#browsing_carousel) -->\n                            <List v-if=\"component.carouselBrowse\">\n                                <ListItem\n                                    v-for=\"(item, item_id) in component.carouselBrowse.items\"\n                                    :key=\"item_id\"\n                                    :uri=\"item.openUrlAction.url\"\n                                    :title=\"item.title\"\n                                    :description=\"item.description\"\n                                    :footer=\"item.footer\"\n                                    :image-uri=\"item.image.url\"\n                                    :image-title=\"item.image.accessibilityText\"\n                                />\n                            </List>\n\n                            <!-- Media responses (https://developers.google.com/actions/assistant/responses#media_responses) -->\n                            <div v-if=\"component.mediaResponse && component.mediaResponse.mediaObjects\">\n                                <Media\n                                    v-for=\"(media, media_id) in component.mediaResponse.mediaObjects\"\n                                    :key=\"media_id\"\n                                    :name=\"media.name\"\n                                    :description=\"media.description\"\n                                    :icon-uri=\"media.icon.url\"\n                                    :icon-title=\"media.icon.accessibilityText\"\n                                    :uri=\"media.contentUrl\"\n                                />\n                            </div>\n\n                            <!-- Table cards (https://developers.google.com/actions/assistant/responses#table_cards) -->\n                            <TableCard\n                                v-if=\"component.tableCard\"\n                                :title=\"component.tableCard.title\"\n                                :subtitle=\"component.tableCard.subtitle\"\n                                :image-uri=\"component.tableCard.image.url\"\n                                :image-title=\"component.tableCard.image.accessibilityText\"\n                                :header=\"component.tableCard.columnProperties\"\n                                :rows=\"component.tableCard.rows\">\n                                <CardButton\n                                    v-for=\"(button, button_id) in component.tableCard.buttons\"\n                                    :key=\"button_id\"\n                                    :uri=\"button.openUrlAction.url\"\n                                    :title=\"button.title\"\n                                />\n                            </TableCard>\n                        </RichComponent>\n\n                        <!-- Visual Selection Responses (https://developers.google.com/actions/assistant/responses#visual_selection_responses) -->\n                        <RichComponent v-for=\"(component, component_id) in message.queryResult.webhookPayload.google.systemIntent\" :key=\"component_id\">\n                            <!-- List (https://developers.google.com/actions/assistant/responses#list) -->\n                            <List\n                                v-if=\"component.listSelect\"\n                                :title=\"component.listSelect.title\"\n                                :subtitle=\"component.listSelect.subtitle\">\n                                <ListItem\n                                    v-for=\"item in component.listSelect.items\"\n                                    :key=\"item.optionInfo.key\"\n                                    :title=\"item.title\"\n                                    :description=\"item.description\"\n                                    :image-uri=\"item.image.url\"\n                                    :image-title=\"item.image.accessibilityText\"\n                                    @click.native=\"send({text: item.optionInfo.key})\"\n                                />\n                            </List>\n\n                            <!-- Carousel (https://developers.google.com/actions/assistant/responses#carousel) -->\n                            <Carousel v-if=\"component.carouselSelect\">\n                                <Card\n                                    v-for=\"item in component.carouselSelect.items\"\n                                    :key=\"item.optionInfo.key\"\n                                    :title=\"item.title\"\n                                    :image-uri=\"item.image.url\"\n                                    :image-title=\"item.image.accessibilityText\"\n                                    :text=\"item.description\"\n                                    @click.native=\"send({text: item.optionInfo.key})\"\n                                />\n                            </Carousel>\n                        </RichComponent>\n                    </section>\n                </div>\n                <div v-if=\"loading\" id=\"message\">\n                    <!-- My message (Loading) -->\n                    <BubbleWrapper><Bubble me loading aria-hidden=\"true\" /></BubbleWrapper>\n\n                    <!-- Default / Webhook bubble (Loading) -->\n                    <Bubble loading aria-hidden=\"true\" />\n                </div>\n            </section>\n        </section>\n\n        <!-- ChatInput is made for submitting queries and displaying suggestions -->\n        <ChatInput ref=\"input\" @submit=\"send\">\n            <!-- Suggestion chips\n                https://developers.google.com/actions/assistant/responses#suggestion_chips\n                https://cloud.google.com/dialogflow/docs/reference/rest/v2beta1/projects.agent.intents#QuickReplies\n                https://cloud.google.com/dialogflow/docs/reference/rest/v2beta1/projects.agent.intents#Suggestions\n            -->\n            <Suggestion\n                v-for=\"(suggestion, suggestion_id) in suggestions.text_suggestions\"\n                :key=\"suggestion_id\"\n                :title=\"suggestion\"\n                @click.native=\"send({text: suggestion})\"\n            />\n\n            <!-- Link suggestion chips\n                https://developers.google.com/actions/assistant/responses#suggestion_chips\n                https://cloud.google.com/dialogflow/docs/reference/rest/v2beta1/projects.agent.intents#LinkOutSuggestion\n            -->\n            <Suggestion\n                v-if=\"suggestions.link_suggestion\"\n                :title=\"suggestions.link_suggestion.destinationName\"\n                :uri=\"suggestions.link_suggestion.uri || suggestions.link_suggestion.url\"\n            />\n        </ChatInput>\n    </main>\n</template>\n\n<style lang=\"sass\">\n@import '@/Style/Theme.sass'\n\nbody\n    margin: 0\n    padding: 0\n    font-family: var(--font)\n    font-display: swap\n    background-color: var(--background)\n\n.container\n    max-width: 500px\n    margin-left: auto\n    margin-right: auto\n    padding: 12px\n    position: relative\n</style>\n\n<style lang=\"sass\" scoped>\n.chat-container\n    padding-top: 80px\n    padding-bottom: 125px\n</style>\n\n<script>\nimport Welcome from './Welcome.vue'\n\nimport Error from '@/Components/Parts/Error.vue'\nimport TopHead from '@/Components/Parts/TopHead.vue'\nimport ChatInput from '@/Components/Parts/ChatInput.vue'\n\nimport RichComponent from '@/Components/Rich/Component.vue'\nimport Bubble from '@/Components/Rich/Bubble.vue'\nimport BubbleWrapper from '@/Components/Rich/BubbleWrapper.vue'\nimport Card from '@/Components/Rich/Card.vue'\nimport CardButton from '@/Components/Rich/CardButton.vue'\nimport Carousel from '@/Components/Rich/Carousel.vue'\nimport List from '@/Components/Rich/List.vue'\nimport ListItem from '@/Components/Rich/ListItem.vue'\nimport Picture from '@/Components/Rich/Picture.vue'\nimport Media from '@/Components/Rich/Media.vue'\nimport TableCard from '@/Components/Rich/TableCard.vue'\nimport Suggestion from '@/Components/Rich/Suggestion.vue'\n\nimport * as uuidv1 from 'uuid/v1'\nimport Vue from 'vue'\nimport VueResource from 'vue-resource'\nVue.use(VueResource);\n\n\nexport default {\n    name: 'App',\n    components: {\n        Welcome,\n        Error,\n        TopHead,\n        ChatInput,\n        RichComponent,\n        Bubble,\n        BubbleWrapper,\n        Card,\n        CardButton,\n        Carousel,\n        List,\n        ListItem,\n        Picture,\n        Media,\n        TableCard,\n        Suggestion\n    },\n    data(){\n        return {\n            app: null,\n            messages: [],\n            language: '',\n            session: '',\n            muted: this.config.muted,\n            loading: false,\n            error: null,\n            // client: new Client(this.config.endpoint).connect()\n        }\n    },\n    computed: {\n        /* The code below is used to extract suggestions from last message, to display it on ChatInput */\n        suggestions(){\n            if (this.messages.length > 0){\n                const last_message = this.messages[this.messages.length - 1]\n                const suggestions = []\n\n                /* Dialogflow Suggestions */\n                for (const component in last_message.queryResult.fulfillmentMessages){\n                    if (last_message.queryResult.fulfillmentMessages[component].suggestions) suggestions.text_suggestions = last_message.queryResult.fulfillmentMessages[component].suggestions.suggestions.map(suggestion => suggestion.title)\n                    if (last_message.queryResult.fulfillmentMessages[component].linkOutSuggestion) suggestions.link_suggestion = last_message.queryResult.fulfillmentMessages[component].linkOutSuggestion\n                    if (last_message.queryResult.fulfillmentMessages[component].quickReplies) suggestions.text_suggestions = last_message.queryResult.fulfillmentMessages[component].quickReplies.quickReplies\n                }\n\n                /* Google Suggestions */\n                if (last_message.queryResult.webhookPayload && last_message.queryResult.webhookPayload.google){\n                    for (const component in last_message.queryResult.webhookPayload.google){\n                        if (last_message.queryResult.webhookPayload.google[component].suggestions) suggestions.text_suggestions = last_message.queryResult.webhookPayload.google[component].suggestions.map(suggestion => suggestion.title)\n                        if (last_message.queryResult.webhookPayload.google[component].linkOutSuggestion) suggestions.link_suggestion = last_message.queryResult.webhookPayload.google[component].linkOutSuggestion\n                    }\n                }\n\n                return suggestions\n            }\n\n            return {\n                text_suggestions: this.config.start_suggestions // <- if no messages are present, return start_suggestions, from config.js to help user figure out what he can do with your application\n            }\n        }\n    },\n    watch: {\n        /* This function is triggered, when new messages arrive */\n        messages(messages){\n            if (this.history()) sessionStorage.setItem('message_history', JSON.stringify(messages)) // <- Save history if the feature is enabled\n        },\n        /* This function is triggered, when request is started or finished */\n        loading(){\n            setTimeout(() => {\n                const app = document.querySelector('#app') // <- We need to scroll down #app, to prevent the whole page jumping to bottom, when using in iframe\n                if (app.querySelector('#message')){\n                    const message = app.querySelectorAll('#message')[app.querySelectorAll('#message').length - 1].offsetTop - 68\n                    window.scrollTo({top: message, behavior: 'smooth'})\n                }\n            }, 2) // <- wait for render (timeout) and then smoothly scroll #app down to the last message\n        }\n    },\n    created(){\n        /* If history is enabled, the messages are retrieved from sessionStorage */\n        if (this.history() && sessionStorage.getItem('message_history') !== null){\n            this.messages = JSON.parse(sessionStorage.getItem('message_history'))\n        }\n\n        /* Session should be persistent (in case of page reload, the context should stay) */\n        if (this.history() && sessionStorage.getItem('session') !== null){\n            this.session = sessionStorage.getItem('session')\n        }\n\n        else {\n            this.session = uuidv1()\n            if (this.history()) sessionStorage.setItem('session', this.session)\n        }\n\n        /* Cache Agent (this will save bandwith) */\n        if (this.history() && sessionStorage.getItem('agent') !== null){\n            this.app = JSON.parse(sessionStorage.getItem('agent'))\n        }\n\n        else {\n             /* Make GET request to API endpoint */\n            let dfDetailsURL = this.config.API_URL + '/get_dialogflow_agent';\n            this.$http.get ( dfDetailsURL ).then(function (dfRes) {\n                this.app = dfRes.body;\n                if (this.history()) sessionStorage.setItem('agent', JSON.stringify(dfRes.body))\n            })\n            .catch(error => {\n                this.error = error.message\n            })\n        }\n    },\n    methods: {\n        send(submission){\n            let request\n\n            /* Text request */\n            if (submission.text){\n                request = {\n                    session: this.session,\n                    queryInput: {\n                        text: {\n                            text: submission.text,\n                            languageCode: this.lang()\n                        }\n                    }\n                }\n            }\n\n            /* Audio request */\n            else if (submission.audio){\n                request = {\n                    session: this.session,\n                    queryInput: {\n                        audioConfig: {\n                            audioEncoding: 'AUDIO_ENCODING_UNSPECIFIED',\n                            languageCode: this.lang()\n                        }\n                    },\n                    inputAudio: submission.audio\n                }\n            }\n\n            this.loading = true\n            this.error = null\n           \n            /* Make POST request to API endpoint */\n            let queryResURL = this.config.API_URL + '/detect_intent';\n            \n            this.$http.post ( queryResURL, JSON.stringify(request) ).then(function (queryResponse) {\n                this.messages.push(queryResponse.body)\n                this.handle(queryResponse.body) // <- trigger the handle function (explanation below)\n            })\n            .catch(error => {\n                this.error = error.message\n            })\n            .then(() => this.loading = false)\n            \n        },\n        handle(response){\n            /* This function is used for speech output */ \n            if (response.outputAudio){\n                const output = new Audio(`data:audio/mp3;base64,${response.outputAudio}`)\n                output.onended = () => this.$refs.input.listen()\n\n                if (!this.muted) output.play()\n            }\n\n            else {\n                let text // <- init a text variable\n\n                /* Dialogflow Text/SimpleResponses */\n                for (const component in response.queryResult.fulfillmentMessages){\n                    if (response.queryResult.fulfillmentMessages[component].text) text = response.queryResult.fulfillmentMessages[component].text.text[0]\n                    if (response.queryResult.fulfillmentMessages[component].simpleResponses) text = response.queryResult.fulfillmentMessages[component].simpleResponses.simpleResponses[0].textToSpeech\n                    if (response.queryResult.fulfillmentMessages[component].rbmText) text = response.queryResult.fulfillmentMessages[component].rbmText.text\n                }\n\n                /* Actions on Google Simple response */\n                if (response.queryResult.webhookPayload && response.queryResult.webhookPayload.google){\n                    for (const component in response.queryResult.webhookPayload.google){\n                        if (response.queryResult.webhookPayload.google[component].simpleResponse) text = response.queryResult.webhookPayload.google[component].simpleResponse.textToSpeech\n                    }\n                }\n\n                const speech = new SpeechSynthesisUtterance(text)\n                speech.voiceURI = this.config.voice\n                speech.lang = this.lang()\n                speech.onend = () => this.$refs.input.listen()\n\n                if (!this.muted) window.speechSynthesis.speak(speech) // <- if app is not muted, speak out the speech\n            }\n        }\n    }\n}\n</script>\n"],"sourceRoot":"src/Views"}]}